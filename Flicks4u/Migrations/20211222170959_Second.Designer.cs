// <auto-generated />
using System;
using Flicks4u.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Flicks4u.Migrations
{
    [DbContext(typeof(AplicacionPeliculasContext))]
    [Migration("20211222170959_Second")]
    partial class Second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Flicks4u.Models.Censura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Censuras");
                });

            modelBuilder.Entity("Flicks4u.Models.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("Flicks4u.Models.Imagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaImagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Imagens");
                });

            modelBuilder.Entity("Flicks4u.Models.Pelicula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CensuraID")
                        .HasColumnType("int");

                    b.Property<bool>("Esactivo")
                        .HasColumnType("bit");

                    b.Property<string>("Escritores")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GeneroID")
                        .HasColumnType("int");

                    b.Property<int?>("ImagenID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Lanzamiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CensuraID");

                    b.HasIndex("GeneroID");

                    b.HasIndex("ImagenID")
                        .IsUnique()
                        .HasFilter("[ImagenID] IS NOT NULL");

                    b.ToTable("Peliculas");
                });

            modelBuilder.Entity("Flicks4u.Models.Tarjetum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigoSeguridad")
                        .HasColumnType("int");

                    b.Property<string>("FechaEmision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTarjeta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tarjeta");
                });

            modelBuilder.Entity("Flicks4u.Models.TipoSubscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoSubscripcions");
                });

            modelBuilder.Entity("Flicks4u.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contrasenia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Esactivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TarjetumID")
                        .HasColumnType("int");

                    b.Property<int>("TipoSubscripcionID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TarjetumID")
                        .IsUnique();

                    b.HasIndex("TipoSubscripcionID");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Flicks4u.Models.VotoPelicula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PeliculaID")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeliculaID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("VotoPeliculas");
                });

            modelBuilder.Entity("Flicks4u.Models.Pelicula", b =>
                {
                    b.HasOne("Flicks4u.Models.Censura", "Censura")
                        .WithMany("Peliculas")
                        .HasForeignKey("CensuraID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flicks4u.Models.Genero", "Genero")
                        .WithMany("Peliculas")
                        .HasForeignKey("GeneroID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flicks4u.Models.Imagen", "Imagen")
                        .WithOne("Pelicula")
                        .HasForeignKey("Flicks4u.Models.Pelicula", "ImagenID");

                    b.Navigation("Censura");

                    b.Navigation("Genero");

                    b.Navigation("Imagen");
                });

            modelBuilder.Entity("Flicks4u.Models.Usuario", b =>
                {
                    b.HasOne("Flicks4u.Models.Tarjetum", "Tarjeta")
                        .WithOne("Usuario")
                        .HasForeignKey("Flicks4u.Models.Usuario", "TarjetumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flicks4u.Models.TipoSubscripcion", "TipoSubscripcion")
                        .WithMany("Usuarios")
                        .HasForeignKey("TipoSubscripcionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarjeta");

                    b.Navigation("TipoSubscripcion");
                });

            modelBuilder.Entity("Flicks4u.Models.VotoPelicula", b =>
                {
                    b.HasOne("Flicks4u.Models.Pelicula", "Pelicula")
                        .WithMany("Votos")
                        .HasForeignKey("PeliculaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flicks4u.Models.Usuario", "Usuario")
                        .WithMany("VotoPeliculas")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pelicula");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Flicks4u.Models.Censura", b =>
                {
                    b.Navigation("Peliculas");
                });

            modelBuilder.Entity("Flicks4u.Models.Genero", b =>
                {
                    b.Navigation("Peliculas");
                });

            modelBuilder.Entity("Flicks4u.Models.Imagen", b =>
                {
                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("Flicks4u.Models.Pelicula", b =>
                {
                    b.Navigation("Votos");
                });

            modelBuilder.Entity("Flicks4u.Models.Tarjetum", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Flicks4u.Models.TipoSubscripcion", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Flicks4u.Models.Usuario", b =>
                {
                    b.Navigation("VotoPeliculas");
                });
#pragma warning restore 612, 618
        }
    }
}
